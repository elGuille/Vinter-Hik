//
//  VinterCam.swift
//  Vinter
//
//  Created by Guillermo GarcÃ­a on 28/07/16.
//  Copyright Â© 2016 Vinter. All rights reserved.
//

import UIKit
import AVFoundation
import AssetsLibrary

class VinterCam {
   
   enum StatusðŸ…” { case Recording, Stopped }
   var statusðŸ…”: StatusðŸ…” = .Stopped
   weak var delegateâ“ž: AVCaptureFileOutputRecordingDelegate?
   let videoFileName$: String
   var atStartâ“‘ = false
   var atEndâ“‘ = false
   var filePath$: String { return "\(appPath$)/\(videoFileName$).mp4" }
   
   var captureSessionâ“ž: AVCaptureSession?
   let fileOutputâ“ž = AVCaptureMovieFileOutput()
   
   init(superViewâ“ž view: UIView, recDelegateâ“ž: AVCaptureFileOutputRecordingDelegate, videoFileName$: String) {
      delegateâ“ž = recDelegateâ“ž
      self.videoFileName$ = videoFileName$
      let captureSessionâ“ž = AVCaptureSession() //; captureSessionâ“ž.sessionPreset = AVCaptureSessionPreset640x480 // MUST USE THE GLOBAL ONE
      let videoDeviceâ“ž = AVCaptureDevice.defaultDeviceWithMediaType(AVMediaTypeVideo)
      let audioDeviceâ“ž = AVCaptureDevice.defaultDeviceWithMediaType(AVMediaTypeAudio)
      let videoInputâ“ž = try! AVCaptureDeviceInput(device: videoDeviceâ“ž) //as AVCaptureDeviceInput
      captureSessionâ“ž.addInput(videoInputâ“ž)
      let audioInputâ“ž = try! AVCaptureDeviceInput(device: audioDeviceâ“ž) as AVCaptureInput
      captureSessionâ“ž.addInput(audioInputâ“ž)
      captureSessionâ“ž.addOutput(fileOutputâ“ž)
      let videoLayerâ“ž = AVCaptureVideoPreviewLayer(session: captureSessionâ“ž) //as AVCaptureVideoPreviewLayer
      videoLayerâ“ž.videoGravity = AVLayerVideoGravityResizeAspectFill
      videoLayerâ“ž.frame = view.bounds
      view.layer.insertSublayer(videoLayerâ“ž, atIndex: 0)
      captureSessionâ“ž.startRunning()
   }
   
   func rec() {
      statusðŸ…” = .Recording
      let fileURLâ“ž = NSURL(fileURLWithPath: filePath$)
      fileOutputâ“ž.startRecordingToOutputFileURL(fileURLâ“ž, recordingDelegate: delegateâ“ž)
   }
   
   func stop() {
      statusðŸ…” = .Stopped
      fileOutputâ“ž.stopRecording()
   }
   
//   private func screenshotCMTime(cmTime: CMTime) throws -> (UIImage, photoTime: CMTime)? {
//      guard let player = player , let asset = player.currentItem?.asset else {
//         return nil
//      }
//      let imageGenerator = AVAssetImageGenerator(asset: asset)
//      
//      var timePicture = CMTime.zero
//      imageGenerator.appliesPreferredTrackTransform = true
//      imageGenerator.requestedTimeToleranceAfter = CMTime.zero
//      imageGenerator.requestedTimeToleranceBefore = CMTime.zero
//      
//      let ref = try imageGenerator.copyCGImageAtTime(cmTime, actualTime: &timePicture)
//      let viewImage: UIImage = UIImage(CGImage: ref)
//      return (viewImage, timePicture)
//   }
   
   
//   deinit { captureSession!.stopRunning()
   
}






